{
  "_args": [
    [
      {
        "raw": "@sap/logging@3.4.0",
        "scope": "@sap",
        "escapedName": "@sap%2flogging",
        "name": "@sap/logging",
        "rawSpec": "3.4.0",
        "spec": "3.4.0",
        "type": "version"
      },
      "/Users/i048564/Documents/Eclipse/neon/sampleAuth/approuter/node_modules/@sap/approuter"
    ]
  ],
  "_from": "@sap/logging@3.4.0",
  "_id": "@sap/logging@3.4.0",
  "_inCache": true,
  "_location": "/@sap/logging",
  "_nodeVersion": "6.9.2",
  "_npmUser": {
    "name": "https-support.sap.com",
    "email": "do.not.reply@sap.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@sap/logging@3.4.0",
    "scope": "@sap",
    "escapedName": "@sap%2flogging",
    "name": "@sap/logging",
    "rawSpec": "3.4.0",
    "spec": "3.4.0",
    "type": "version"
  },
  "_requiredBy": [
    "/@sap/approuter"
  ],
  "_resolved": "https://npm.sap.com/@sap/logging/-/logging-3.4.0.tgz",
  "_shasum": "52b85755a6aac67aa39fe129ededd967435fcd2f",
  "_shrinkwrap": {
    "version": "3.4.0",
    "name": "@sap/logging",
    "dependencies": {
      "@sap/e2e-trace": {
        "version": "1.3.0",
        "dependencies": {
          "request-stats": {
            "version": "3.0.0"
          },
          "http-headers": {
            "version": "3.0.2"
          },
          "next-line": {
            "version": "1.1.0"
          },
          "wrappy": {
            "version": "1.0.2"
          },
          "once": {
            "version": "1.4.0"
          }
        }
      },
      "eyes": {
        "version": "0.1.8"
      },
      "lodash": {
        "version": "4.17.5"
      },
      "pkginfo": {
        "version": "0.3.1"
      },
      "winston": {
        "version": "1.1.2"
      },
      "moment": {
        "version": "2.19.3"
      },
      "isstream": {
        "version": "0.1.2"
      },
      "colors": {
        "version": "1.0.3"
      },
      "stack-trace": {
        "version": "0.0.10"
      },
      "cycle": {
        "version": "1.0.3"
      }
    }
  },
  "_spec": "@sap/logging@3.4.0",
  "_where": "/Users/i048564/Documents/Eclipse/neon/sampleAuth/approuter/node_modules/@sap/approuter",
  "dependencies": {
    "@sap/e2e-trace": "^1.1.2",
    "lodash": "4.17.5",
    "moment": "2.19.3",
    "winston": "1.1.2"
  },
  "description": "Provides logging and tracing functionalities for Node.js applications",
  "devDependencies": {
    "async": "2.0.1",
    "eslint": "3.2.2",
    "express": "4.14.0",
    "filter-node-package": "^2.0.0",
    "istanbul": "0.4.5",
    "markdown-toc": "^1.1.0",
    "mocha": "3.0.2",
    "node-style": "^2.0.0",
    "proxyquire": "1.7.10",
    "request": "2.79.0",
    "should": "10.0.0",
    "sinon": "1.17.5",
    "supertest": "2.0.0"
  },
  "dist": {
    "shasum": "52b85755a6aac67aa39fe129ededd967435fcd2f",
    "tarball": "https://npm.sap.com/@sap/logging/-/logging-3.4.0.tgz"
  },
  "engines": {
    "node": "^0.12.7 || ^4.4.0 || ^6.0.0 || ^8.0.0"
  },
  "license": "SEE LICENSE IN developer-license-3.1.txt",
  "main": "index.js",
  "maintainers": [
    {
      "name": "https-support.sap.com",
      "email": "do.not.reply@sap.com"
    }
  ],
  "name": "@sap/logging",
  "optionalDependencies": {},
  "readme": "@sap/logging\n===========\n\nA module that provides logging and tracing functionalities for Node.js applications.\n\n<!-- toc -->\n\n- [Example](#example)\n- [Logging & Tracing](#logging--tracing)\n- [Categories & Locations](#categories--locations)\n- [Wildcard support](#wildcard-support)\n- [Formats](#formats)\n- [Severity Levels](#severity-levels)\n- [Changing severity levels for an application](#changing-severity-levels-for-an-application)\n  * [XS Advanced](#xs-advanced)\n  * [Cloud Foundry](#cloud-foundry)\n- [Logging the current user](#logging-the-current-user)\n- [API](#api)\n  * [Application level context](#application-level-context)\n  * [Request level context](#request-level-context)\n    + [Request id](#request-id)\n  * [Loggers](#loggers)\n  * [Tracers](#tracers)\n    + [Convenient tracing methods](#convenient-tracing-methods)\n  * [Other](#other)\n\n<!-- tocstop -->\n\n### Example\n\nHere you can see how to consume the module using the very famous [express](https://www.npmjs.com/package/express) module:\n\n```js\nvar LoggingLib = require('@sap/logging');\nvar express = require('express');\n\nvar app = express();\n\nvar appContext = LoggingLib.createAppContext();\n\napp.use(LoggingLib.expressMiddleware(appContext));\n\napp.get('/demo', function (req, res) {\n  var logger = req.loggingContext.getLogger('/Application/Network');\n  var tracer = req.loggingContext.getTracer(__filename);\n\n  logger.info('Retrieving demo greeting ...');\n  tracer.info('Processing GET request to /demo');\n\n  res.send('Hello World!');\n});\n\napp.listen(3000, function() {\n  console.log('Server started');\n});\n```\n\nIn general you just need to:\n- Initialize the Logging library with some application-wide options\n- Use the provided middleware that will extract request specific information.\nIt is recommended that this middleware is the first one to be called in order to have the logging context available as early as possible.\nIt is also recommended to have the middleware that sets the user of the request (if the application intends to log the current user) right after the one provided by this library.\n- Instantiate a Logger and a Tracer via the _loggingContext_ property of the request\n- Log and trace whatever you need\n\nSee more details below.\n\n### Logging & Tracing\n\nLogs are addressed to an administrator of an application. Traces - to a developer or support staff.\n- Events that need to be logged are related to how the app operates - e.g. the app cannot display some results taken from a remote HTTP service because the remote server is down.\nAn administrator of an app does not need to know how it is implemented. He/she should just be able to determine the state of the app itself.\n- Traces are mainly used when a problem has occurred and further investigation on code level has to take place.\n\n### Categories & Locations\n\n- Categories - represent a feature area in an application. For example, different layers - Network layer, Database layer etc.\nThe concept of categories is used in logging.\n- Locations - represent a location in the source code - e.g. a path to a file. Used in the context of tracing. Getting a tracer object requires explicitly providing a location. It is recommended to pass as argument the location of the current script - `__filename`.\n\nThe path to the application root is removed from the source file paths in the trace output to reduce duplication.\nThe application root directory is taken from _HOME_ environment variable. If it is not defined, absolute file paths are used in the trace output.\nExample:\n\nLet's assume the structure of your application looks like the following:\n\n<pre>\n+-- demo-app\n|   +-- package.json\n|   +-- lib\n|   |   +-- index.js\n|   |   +-- services\n|   |   |   +-- customer-service.js\n|   |   |   +-- sales-service.js\n</pre>\n\nHere is how the location of a script (path to a file) will look like in the trace entries (having in mind `__filename` has been passed as location to the tracer):\n\n| Script | _HOME_ environment variable is set  | _HOME_ environment variable is not set |\n| ------ | ----------------------------------- | -------------------------------------- |\n| index.js | /lib/index.js | /path/from/root/demo-app/lib/index.js |\n| customer-service.js | /lib/services/customer-service.js | /path/from/root/demo-app/lib/services/customer-service.js |\n\nThe same applies to Windows systems as well.\n\n**Note**: The path separator in the trace entries is always a forward slash, no matter the platform.\n\n### Wildcard support\n\nThe asterisk (*) is the only wildcard character supported by the library.\nIt corresponds to zero or more characters (no matter what they are).\nLet's illustrate the wildcard usage using the example application structure from the\n[Categories & Locations section](#categories--locations),\nassuming the _HOME_ environment variable is set to the root of the application (as it would be on XS advanced or Cloud Foundry):\n\n| Pattern | Result |\n| ------- | ------ |\n| /Application/Network | Match a certain Category |\n| /Application/Network/* | Match all subcategories |\n| /lib/services/users-service.js | Match a specific file |\n| /lib/services/* | Match all files in all subdirectories of _services_ |\n\n### Formats\n\n- [ListLog](http://help.sap.com/saphelp_nw73ehp1/helpdata/en/53/82dae7c2f5439a8afd1b0ee95c2e45/content.htm) format is used for the logs\n- [Trace](http://help.sap.com/saphelp_nw74/helpdata/en/48/4f3966e39472d2e10000000a42189c/content.htm) format is used for traces\n\n**Note**: instead of thread-name, a request id is used. This is an identifier that helps to distinguish which events are logged/traced because of which requests.\nMore info on that is available in [this section](#request-id).\n\n### Severity Levels\n\nThe following table shows which severity levels are available for the loggers and tracers:\n\n| Logging | Tracing |\n| ------- | ------- |\n|         | debug   |\n|         | path    |\n| info    | info    |\n| warning | warning |\n| error   | error   |\n| fatal   | fatal   |\n\nHere you can find when to use which level:\n\n| Level   | When to use |\n| -----   | ----------- |\n| debug   | Used to output the internal status of a program. |\n| path    | Used to analyze the execution flow of a program. |\n| info    | Used for events that do not need any follow up activity. They show the normal operations within an app. |\n| warning | Used for events that need follow up activity in order to prevent errors in the future. |\n| error   | Used when the desired tasks cannot be completed and the application is still usable. |\n| fatal   | Used in case of errors, because of which the application is no longer usable. |\n\nThe default severity level for loggers is _info_ and the default one for tracers is _error_.\n\n### Changing severity levels for an application\n\n#### XS Advanced\n\nYou can enable debug logs and traces for an application deployed on XS advanced via the command:\n\n```sh\nxs set-logging-level <application-name> \"*\" debug\n```\n\nThis can be reverted via the command:\n\n```sh\nxs unset-logging-level <application-name> \"*\"\n```\n\nRestart of the application is not required for those commands to take effect.\n\nThe example above shows how to enable _debug_ level for all loggers and tracers.\nIt is possible to use the command for setting levels for a single category or location\n(e.g. `xs set-logging-level <application-name> \"/index.js\" debug`),\nor multiple by using the asterisk wildcard (e.g. `xs set-logging-level <application-name> \"/Application/Network/*\" debug`).\nThe comparison with the actual category/location of a logger/tracer is executed in a case insensitive manner.\n\n#### Cloud Foundry\n\nYou can enable debug logs and traces for an application deployed on Cloud Foundry via setting the environment variable `XS_APP_LOG_LEVEL`:\n\n```sh\ncf set-env <application-name> XS_APP_LOG_LEVEL debug\n```\n\nThis can be reverted via the command:\n\n```sh\ncf unset-env <application-name> XS_APP_LOG_LEVEL\n```\n\n**Note**: Application restart is required after each of the commands above in order the changes to the environment to take effect.\n\nThe `XS_APP_LOG_LEVEL` environment variable can be a valid level from `debug` to `fatal`.\nIts value (if valid) will be used instead of all already set levels.\nIf `XS_APP_LOG_LEVEL` is set to `none`, then all logging and tracing is disabled (useful for automated tests).\n\nThis environment variable can be used in XS advanced as well, but the on-premise platform provides more handy mechanism via the `xs set-logging-level` command.\n\n### Logging the current user\n\nLogging the current user is not enabled by default. The environment variable `XS_LOG_USER` needs to be set to `true` in order the user to appear in the log entries. The value is taken from the `req.user.id` property.\n\n### API\n\nHere is how you can consume the logging module:\n\nThere are three layers of information that the module needs:\n- application level context - information that is valid for the whole application (e.g. where to store the logs and the traces)\n- request level context - information that is valid only during the processing of an HTTP request (e.g. who is the current user)\n- message level context - information regarding a single log or trace entry (e.g. the message of the entry)\n\n#### Application level context\n\n```js\nvar LoggingLib = require('@sap/logging');\n\nvar appContext = LoggingLib.createAppContext({\n  logLocation: 'logs/log-file.log',\n  traceLocation: 'logs/trace-file.trc',\n  csnComponent: 'ab-cd-efg'\n});\n```\n\nTo create the application context, pass some application-wide options. Here is the explanation of the available properties:\n\n| Property name | Meaning |\n| ------------- | ------- |\n| logLocation   | Used to specify where to store the log entries. The default is the standard output. A string is considered a path to a file. |\n| traceLocation | Used to specify where to store trace entries. The default is the standard error. A string is considered a path to a file. |\n| csnComponent  | Only applicable for SAP apps. Should be of type string. |\n\n**Note**: when `logLocation` and `traceLocation` point to two different locations, all log entries are automatically written to the traces as well to make troubleshooting easier.\nIn case you have no access to a request object in your code (e.g. in jobs), you may also instantiate loggers and tracers from the application context:\n\n```js\nappContext.getLogger('/Application/Jobs');\n// or you may instantiate it and explicitly pass an id which will be used instead of request id, like this:\n// appContext.getLogger('/Application/Jobs', jobRunId);\n\nappContext.getTracer(__filename);\n// or with a custom id:\n// appContext.getTracer(__filename, jobRunId);\n```\nIf you do not pass an id when instantiating a logger/tracer, the default is an empty string.\n\nYou may use the application context to change severity levels (with wildcards for flexibility):\n```js\nappContext.setLevel('/Application/*', 'warning'); // for a logger\nappContext.setLevel(pathToFile, 'debug'); // for a tracer\n```\n\nor to unset such:\n```js\nappContext.unsetLevel('/Application/*'); // for a logger\nappContext.unsetLevel(pathToFile); // for a tracer\n```\n\n#### Request level context\n\n```js\n function(req) {\n   var reqContext = appContext.createRequestContext(req);\n   // Here you may explicitly pass an id as a second argument\n   // (but you need to be sure that it will not collide with other ids).\n   // If there is no second argument, then the module will take the id from the request headers\n   // or will generate one for you.\n\n   var id = reqContext.requestId;\n   // the request id is accessible through the 'requestId' property of the request context\n }\n```\n\nIf you use the popular [express](https://www.npmjs.com/package/express) module, there is a utility middleware that you can use (see the [this example](#example)).\nIt automatically attaches a property named _\"loggingContext\"_ to the request object.\n\n##### Request id\n\nBecause of the single-threaded nature and the event loop mechanism in Node.js, you may:\n- receive a request\n- start some async I/O operation\n- in the meantime start processing another request before returning a response to the first one\n\nThis means that the log entries for the two requests will be mixed a bit. To overcome this issue, each request (and the corresponding request context) is\nassociated with a unique id which is present in the logs and traces for that request. This id can be provided explicitly while creating a request context\n(but in this case you need to take care that it will not collide with other ids),\ncan be retrieved from the request headers _x-request-id_, _x-correlationid_, _x-vcap-request-id_ (traversed in that order), or can be generated by the library.\nIts value is available in the `requestId` property of the request context.\nIf you use the express middleware, this request id will be included in the response headers (header _x-request-id_),\nso in case of any troubles you may see the request id in the response and then filter the logs to see what are the entries for that request.\nHere is an example trace entry with a request id (in the square brackets):\n\n> Aug 30, 2015 06:58:28 PM /lib/demo.js [idyoly5z] INFO: Hello World\n\n#### Loggers\n\nYou may create a logger in the following way:\n\n```js\nvar logger = req.loggingContext.getLogger('/Application/Network');\n```\n\nThe request context has got the _\"getLogger\"_ function that takes 1 string argument - the category. Categories are names of functional areas in an application.\nWe recommend your categories always begin with _\"/Application\"_. The categories form a hierarchy with forward slash as a separator.\n\nYou may always get the severity level (a string) of a logger with such code:\n```js\nvar level = logger.getLevel();\n```\n\nIt is also possible to check whether an entry with a specific severity level will be logged with the current level configuration:\n\n```js\nvar willItBeLogged = logger.isEnabled('info');\n```\n\nLogging entries:\n\n```js\nlogger.info('Successful login of user %s - ', user, new Date());\nlogger.warning('Job could not finish successfully. An app admin should retrigger it.');\nlogger.error(new Error('Uups, an error has occurred'));\nlogger.fatal('We are in trouble');\n```\n\nYou may use the same string interpolation mechanism as with [util.format](https://nodejs.org/api/util.html#util_util_format_format_args)\n\nThe available severity levels for logging are: _info, warning, error, fatal_.\n\nLogging errors:\n```js\nfunction callback(err, result) {\n  if (err) {\n    logger.error(err, 'Error during operation X');\n  }\n  // ...\n}\n```\nIf the first argument is an error, its message is appended to the log message.\nAlso the error stack is written to the trace.\nThis works for all severity levels and also with tracers.\n\n#### Tracers\n\nAll you need to do to obtain a tracer instance is:\n\n```js\nvar tracer = req.loggingContext.getTracer(__filename);\n```\n\nMethods regarding level getting and checking are provided (similar to the loggers):\n\n```js\nvar level = tracer.getLevel();\nvar willItBeTraced = tracer.isEnabled('path');\n// etc.\n```\n\nThe available severity levels for tracing are: _debug, path, info, warning, error, fatal_.\n\n##### Convenient tracing methods\n\n**Note**: the first argument to all of these methods should be a string with the name of the function in which entries are being traced.\n\nThere are several methods that the API provides for convenience (they use severity level _path_):\n- entering - used to record that a function has been entered in the program flow. You may pass all of the arguments of your function to the _entering_ function and they will be traced.\n- exiting - typically used in pair with the _entering_ method. You may pass the return value of your function to the _exiting_ function.\n\n```js\nfunction myFunction(tracer, a, b ,c) {\n  tracer.entering('myFunction', a, b, c);\n\n  var result = // some logic here ...\n\n  tracer.exiting('myFunction', result);\n  return result;\n}\n```\n\n- throwing - used when you would like to trace when the code is about to throw an error. You may pass the error that is about to be thrown as an argument.\n- catching - used in catch blocks. You may pass the caught error as an argument.\n\n```js\nfunction func1(tracer) {\n  var error = new Error('An error has occurred');\n  tracer.throwing('func1', error);\n  throw err;\n}\n\nfunction func2(tracer) {\n  try {\n    func1(tracer);\n  } catch (err) {\n    tracer.catching('func2', err);\n    // logic for processing the error\n  }\n}\n```\n\n#### Other\n\nThe library supports SAP Passports. When a request context is created with a request object that has the `sap-passport` header,\nthe unique identifiers of the received SAP Passport will be part of the log entries.\n",
  "readmeFilename": "README.md",
  "repository": {},
  "scripts": {},
  "version": "3.4.0"
}
